#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
int main() {
pid_t child_pid;
// Case 1: Parent and child execute the same program with the same code.
printf("Case 1: Parent and child execute the same program with the same code.\n");
child_pid = fork();
if (child_pid == 0) {
// This is the child process.
printf("Child process (PID %d) executing.\n", getpid());
// Child code here.
printf("Child process (PID %d) finished.\n", getpid());
} else if (child_pid > 0) {
// This is the parent process.
printf("Parent process (PID %d) waiting for the child (PID %d) to finish.\n", getpid(), 
child_pid);
wait(NULL); // Wait for the child to finish.
printf("Parent process (PID %d) finished waiting.\n", getpid());
} else {
perror("Fork failed.");
return 1;
}
// Case 2: Parent and child execute the same program with different code.
printf("\nCase 2: Parent and child execute the same program with different code.\n");
child_pid = fork();
if (child_pid == 0) {
// This is the child process.
printf("Child process (PID %d) executing.\n", getpid());
// Child code here (different from parent).
printf("Child process (PID %d) finished.\n", getpid());
} else if (child_pid > 0) {
// This is the parent process.
printf("Parent process (PID %d) waiting for the child (PID %d) to finish.\n", getpid(), 
child_pid);
wait(NULL); // Wait for the child to finish.
printf("Parent process (PID %d) finished waiting.\n", getpid());
} else {
perror("Fork failed.");
return 1;
}
return 0;
}
