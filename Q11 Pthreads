1.SUM

#include <iostream>
#include <pthread.h>
using namespace std;
struct ThreadData {
    int* array;
    int start;
    int end;
    int sum;
};

void* sumArray(void* arg) {
    ThreadData* data = static_cast<ThreadData*>(arg);
    int partialSum = 0;

    for (int i = data->start; i <= data->end; i++) {
        partialSum += data->array[i];
    }

    data->sum = partialSum;
    pthread_exit(nullptr);
}

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    int* array = new int[n];
    for (int i = 0; i < n; i++) {
        cout << "Enter element " << i + 1 << ": ";
        cin >> array[i];
    }

    int numThreads;
    cout << "Enter the number of threads: ";
    cin >> numThreads;

    pthread_t* threads = new pthread_t[numThreads];
    ThreadData* threadData = new ThreadData[numThreads];

    int elementsPerThread = n / numThreads;
    int remainingElements = n % numThreads;

    int start = 0;
    for (int i = 0; i < numThreads; i++) {
        int end = start + elementsPerThread - 1;
        if (i < remainingElements) {
            end++;
        }

        threadData[i].array = array;
        threadData[i].start = start;
        threadData[i].end = end;

        pthread_create(&threads[i], nullptr, sumArray, &threadData[i]);

        start = end + 1;
    }

    for (int i = 0; i < numThreads; i++) {
        pthread_join(threads[i], nullptr);
    }

    int finalSum = 0;
    for (int i = 0; i < numThreads; i++) {
        finalSum += threadData[i].sum;
    }

    cout << "The sum of the array is: " << finalSum << endl;

    delete[] array;
    delete[] threads;
    delete[] threadData;

    return 0;
}

2.FACTORIAL

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

long long factorial;
void *calculate_factorial(void *parameter);

int main(int argc, char *argv[]) {
    pthread_t tid ;
    pthread_attr_t attr ;

    if (argc != 2) {
        fprintf(stderr, "usage: a.out <integer value>\n");
        return -1;
    }
    if (atoi(argv[1]) < 0) {
        fprintf(stderr, "%d must be >= 0\n", atoi(argv[1]));
        return -1;
    }

    pthread_attr_init(&attr);
    pthread_create(&tid, &attr, calculate_factorial, argv[1]);
    pthread_join(tid, NULL);

    printf("Factorial = %lld\n", factorial);
}

void *calculate_factorial(void *parameter) {
    int n = atoi(parameter);
    factorial = 1;

    for (int i = 1; i <= n; i++) {
        factorial *= i;
    }

    pthread_exit(0);
}
